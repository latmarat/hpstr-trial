<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">research blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2017-01-13T15:40:37+01:00</updated>
<id>/</id>
<author>
  <name>Marat I. Latypov</name>
  <uri>/</uri>
  <email>marat.latypov@georgiatech-metz.fr</email>
</author>


<entry>
  <title type="html"><![CDATA[My talk on quantification of EBSD datasets]]></title>
 <link rel="alternate" type="text/html" href="/emi-info/" />
  <id>/emi-info</id>
  <updated>2016-11-17T00:00:00-00:00</updated>
  <published>2016-11-17T00:00:00+01:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;I recently presented our work on Chord Length Distribution for quantification of microstructures at &lt;a href=&quot;http://www.lem3.fr/2016EMI-IC/&quot;&gt;EMI-2016 conference&lt;/a&gt; held in Metz. The slides are now available online &lt;a href=&quot;http://latmarat.net/blog/slides/emi-slides&quot;&gt;here&lt;/a&gt;. Push ‘F’ for full screen mode and use ← and →  arrows for navigation. &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#108;&amp;#097;&amp;#116;&amp;#109;&amp;#097;&amp;#114;&amp;#097;&amp;#116;&amp;#064;&amp;#103;&amp;#097;&amp;#116;&amp;#101;&amp;#099;&amp;#104;&amp;#046;&amp;#101;&amp;#100;&amp;#117;&quot;&gt;Let me know&lt;/a&gt; if you have any questions or comments.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/emi-info/&quot;&gt;My talk on quantification of EBSD datasets&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on November 17, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[EBSD data analytics for quantification of UFG microstructures]]></title>
 <link rel="alternate" type="text/html" href="/slides/emi-slides/" />
  <id>/slides/emi-slides</id>
  <updated>2016-06-28T00:00:00-00:00</updated>
  <published>2016-11-14T00:00:00+01:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide1.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide2.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide3.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide4.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide5.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide6.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide7.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide8.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide9.PNG&quot; data-background-size=&quot;contain&quot;&gt;

&lt;div&gt;
&lt;img class=&quot;plain&quot; src=&quot;/images/2016-11-14-emi-presentation/img/chords.gif&quot; weight=&quot;250&quot; alt=&quot;chords animated&quot; /&gt;

&lt;img class=&quot;plain&quot; src=&quot;/images/2016-11-14-emi-presentation/img/hist.gif&quot; weight=&quot;250&quot; alt=&quot;histogram animated&quot; /&gt;

&lt;/div&gt;

&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide10.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide11.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide12.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide13.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide14.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide15.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide16.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide17.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide18.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide19.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide20.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide21.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide22.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide23.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide24.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide25.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide26.PNG&quot; data-background-size=&quot;contain&quot;&gt;

&lt;h5&gt; &lt;/h5&gt;


&lt;style&gt;
.axis path,
.axis line {
fill: none;
stroke: black;
shape-rendering: crispEdges;
}
.axis text {
font-family: sans-serif;
font-size: 11px;
}

&lt;/style&gt;

&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/images/2016-07-01-presentation/scripts.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;column&quot; style=&quot;float:left; width: 50%&quot; id=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;column&quot; style=&quot;float:right; width: 50%&quot; id=&quot;right&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;author&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;link&quot;&gt;&lt;/div&gt;

&lt;script&gt;

d3.json(&#39;/images/2016-07-01-presentation/data/ldr.json&#39;,function(error, json) {
  if (error) return console.warn(error);
  data = json
  plotLDR(data);
})
&lt;/script&gt;

&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide27.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide28.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-11-14-emi-presentation/slides/Slide29.PNG&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;h2&gt;References and links&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;b&gt;Materials Informatics in general&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1016/B978-0-12-410394-8.00009-6&quot;&gt;S.R. Kalidindi, Hierarchical Materials Informatics: Novel Analytics for Materials Data, 2015&lt;/a&gt; (book)
  &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Chord-length distribution&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1088/0965-0393/24/7/075002&quot;&gt;Turner, Niezgoda, and Kalidindi, &lt;i&gt;MSMSE&lt;/i&gt; 24 (2016)&lt;/a&gt;
  &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Structure-property linkage&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1016/j.actamat.2015.02.045&quot;&gt;Gupta et al., &lt;i&gt;Acta Mater.&lt;/i&gt; 91 (2015) 239-254&lt;/a&gt;
  &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Group website&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;http://mined.gatech.edu&quot;&gt;mined.gatech.edu&lt;/a&gt;
  &lt;/li&gt;
&lt;/ol&gt;

Go back to &lt;a href=&quot;http://latmarat.net/blog&quot;&gt;blog home&lt;/a&gt;

&lt;/section&gt;

    &lt;p&gt;&lt;a href=&quot;/slides/emi-slides/&quot;&gt;EBSD data analytics for quantification of UFG microstructures&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on November 14, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[How to make an easy transition from PowerPoint to reveal.js]]></title>
 <link rel="alternate" type="text/html" href="/ppt2reveal/" />
  <id>/ppt2reveal</id>
  <updated>2016-08-26T00:00:00-00:00</updated>
  <published>2016-08-26T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;About a year ago, I saw reveal.js for the first time and immediately fell in love with it. It’s actually hard not to fell in love when you look at the sample slides: pretty colors, transitions, and appealing functions. So I decided that I will definitely do my next presentation in reveal.js. Well, it didn’t quite happen until very recently. There were a couple of reasons for that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reveal.js is great and easy to use when you have a few bullet points or a single picture/table/code snippet per slide under a short heading. Arranging more than one element becomes a serious pain in the neck, at least to me, a beginner in JavaScript.  Yet worse, more often than not,  I have tons of images and text labels in my slides, whose arrangement using JS code is simply impractical.&lt;/li&gt;
  &lt;li&gt;Presentation deadlines tend to approach surprisingly fast so that days before the presentation, when I’m supposed to practice my speech, I might find myself sneaking some final calculations. In such rushy situations, having to work on slides in a new and more demanding environment (instead of good old PowerPoint) is nothing but an additional burden. On top of that, I rarely make slides from a scratch, some (e.g. introductory) slides migrate from presentation to presentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these challenges and restrictions, I put using reveal.js on hold for better times …until I thought&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;why not export PPT slides as images and use them as a background for reveal.js slides!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Accomplishing this is pretty easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open your PPT file, go to &lt;em&gt;File&lt;/em&gt; – &lt;em&gt;Save as&lt;/em&gt; and select an image format, e.g. PNG or JPG.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now use these images as background for each slide in reveal.js&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of code in reveal.js that would result in a slide with an exported PPT slide as a background image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/slides/Slide01.png&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;contain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/section&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;automate-with-a-python-script&quot;&gt;Automate with a Python script&lt;/h2&gt;

&lt;p&gt;Ok, but what if you have hundreds of slides? It’s no fun to copy-paste these JS lines for each of them. To automate the process, I came up with a Python script to automatically write the necessary reveal.js lines to a markdown file for every png file in the folder containing exported PPT slides.&lt;/p&gt;

&lt;p&gt;To use the script, specify the right paths, file extension and then copy-paste the contents of the output _slides.md file to your reveal.js file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dirName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/path/to/folder/containing/ppt/slides&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;Slide&#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# default for PowerPoint&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;.png&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;outFileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;_slides.md&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# find and sort the files&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;files2search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;slides&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files2search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;/path/to/folder/where/you/will/store/the/files&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# just in case you want to add any other reveal.js keywords in section definition&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jstext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# loop through the PPT files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slides&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jstext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;section data-background=&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%02&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot; data-background-size=&quot;contain&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jstext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;go-pro-with-svg&quot;&gt;Go pro with svg&lt;/h2&gt;

&lt;p&gt;So far so good,&lt;/p&gt;

&lt;h1 id=&quot;so-what&quot;&gt;So what?&lt;/h1&gt;

&lt;p&gt;By converting PPT slides into a reveal.js presentation, you can immediately enjoy the power of reveal.js&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put your slides online and
    &lt;ul&gt;
      &lt;li&gt;access from anywhere using only a browser&lt;/li&gt;
      &lt;li&gt;share slides with a single link&lt;/li&gt;
      &lt;li&gt;share the link with your audience and let them follow the slides from mobile phones during your talk&lt;/li&gt;
      &lt;li&gt;embed slides on your website/blog&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;choose reveal.js transitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s cool but still some of the readers may say ‘meh, that’s too much work and I can already do that with slideshare/dropbox or a simple pdf’. So why bother, indeed?&lt;/p&gt;

&lt;p&gt;The true value having the presentation in reveal.js is that as we have the bulk of our slides converted we can&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ppt2reveal/&quot;&gt;How to make an easy transition from PowerPoint to reveal.js&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on August 26, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[ABAQUS mesh from EBSD using MTEX]]></title>
 <link rel="alternate" type="text/html" href="/ebsd2abaqus/" />
  <id>/ebsd2abaqus</id>
  <updated>2016-07-12T00:00:00-00:00</updated>
  <published>2016-07-12T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;This article describes a procedure for generating ABAQUS finite element mesh from experimental EBSD maps using MTEX toolbox in MATLAB.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;It is sometimes desired to perform micromechanical finite element (FE) analysis of deformation of microstructures based on experimentally measured EBSD maps. The present post describes MATLAB scripts developed for automatic generation of FE mesh for a given EBSD map. The script is easy to use and requires minimal knowledge of coding in MATLAB.&lt;/p&gt;

&lt;p&gt;To use the framework described here, you will need&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MATLAB&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mtex-toolbox.github.io/&quot;&gt;MTEX toolbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ebsd2abaqus script (available on GitHub &lt;a href=&quot;https://github.com/latmarat/ebsd2abaqus/blob/master/ebsd2abaqus.m&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mesh-generation&quot;&gt;Mesh generation&lt;/h1&gt;

&lt;p&gt;If you know how to use MTEX for EBSD analysis and have a clean EBSD map loaded into MATLAB that satisfies the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;square grid&lt;/li&gt;
  &lt;li&gt;no missing pixels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then &lt;a href=&quot;https://github.com/latmarat/ebsd2abaqus/archive/master.zip&quot;&gt;download&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus&lt;/code&gt; script and generate the FE mesh with a single MATLAB command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd2abaqus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd&lt;/code&gt; is a MATLAB variable containing the 2D EBSD data of interest and &lt;code class=&quot;highlighter-rouge&quot;&gt;angle&lt;/code&gt; is the disorientation angle for grain segmentation.&lt;/p&gt;

&lt;p&gt;The script takes EBSD pixels to form hexahedral elements of type C3D8 and writes the node coordinates to &lt;code class=&quot;highlighter-rouge&quot;&gt;inp&lt;/code&gt; file. Grains are passed to ABAQUS as Element Sets, phases are passed as Element Sets and Sections, which makes it easy to assign different properties to grains or phases. Nodes on each face of the mesh are also saved as Node Sets that can be used to prescribe boundary conditions. The script generates pseudo-2D mesh: the resulting mesh consists of 3D elements but has only &lt;em&gt;one&lt;/em&gt; element in thickness (along &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt; axis).&lt;/p&gt;

&lt;p&gt;As a result of running the script, the mesh is written to &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd.inp&lt;/code&gt; file. To work with the model, open &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd.inp&lt;/code&gt; in ABAQUS/CAE by going File-Import-Model (or modify the input file directly in your favorite text editor). Define  ABAQUS materials for each phase and finalize the finite element model (Step, BCs, etc.) to run the simulations.&lt;/p&gt;

&lt;p&gt;If you are new to MTEX and unsure how to process the EBSD data, read on the following sections, which will guide you through the steps that might be necessary for preparing the data and correct mesh generation, such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EBSD data import&lt;/li&gt;
  &lt;li&gt;conversion from hexagonal to square grid&lt;/li&gt;
  &lt;li&gt;clean-up of inaccurate pixels&lt;/li&gt;
  &lt;li&gt;filling missing pixels&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ebsd-data-import&quot;&gt;EBSD data import&lt;/h1&gt;

&lt;p&gt;The current framework utilizes MTEX functions so that MTEX must be properly installed in MATLAB. MTEX is an open-source MATLAB toolbox for texture and EBSD analysis (available at  &lt;a href=&quot;http://mtex-toolbox.github.io/&quot;&gt;http://mtex-toolbox.github.io/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Once MTEX is installed, you need to import the EBSD data into MATLAB. If you have never used MTEX, the simplest way to import the data is through MTEX Import Wizard. Import Wizard can be started by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;import_wizard&lt;/code&gt; in MATLAB command window, which results in a window shown in the figure below.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://farm8.staticflickr.com/7293/27900130560_bc7f3a4321_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7293/27900130560_bc7f3a4321_z_d.jpg&quot; alt=&quot;Screen-shots of MTEX Import Wizard&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Screen-shots of MTEX Import Wizard.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;EBSD&lt;/code&gt; tab and click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;. Browse to your EBSD file and open it. Accept the default settings in several windows, choose &lt;em&gt;workspace variable&lt;/em&gt; as the import method in Import Data window and push &lt;code class=&quot;highlighter-rouge&quot;&gt;Finish&lt;/code&gt;. Now EBSD data is stored in a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd&lt;/code&gt;. Further data processing will be carried out on this variable.&lt;/p&gt;

&lt;h1 id=&quot;pre-processing&quot;&gt;Pre-processing&lt;/h1&gt;

&lt;h2 id=&quot;grid-conversion&quot;&gt;Grid conversion&lt;/h2&gt;

&lt;p&gt;The present framework of building a FE model approximates microstructures by hexahedral mesh, i.e. mesh consisting of cuboidal (C3D8) elements. The use of a hexahedral mesh inevitably leads to ladder-like grain/phase boundaries, however, this is assumed to be a sufficiently good approximation for many cases, especially when the EBSD map has a relatively high resolution.&lt;/p&gt;

&lt;p&gt;Building a hexahedral mesh is &lt;em&gt;much&lt;/em&gt; easier if the EBSD data is on a square grid. Since experimental EBSD maps are frequently recorded on hexagonal grids, it is necessary to convert these maps to square grids. In MTEX conversion can be done by using &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: Although &lt;code class=&quot;highlighter-rouge&quot;&gt;fill(ebsd)&lt;/code&gt; converts the grid, use this function with care and check if the data is not distorted. If the results of &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; function are not satisfactory, you can also try converting grids in ang files prior to loading the data into MTEX with the aid Dream.3D software (available at  &lt;a href=&quot;http://dream3d.bluequartz.net/&quot;&gt;http://dream3d.bluequartz.net/&lt;/a&gt;). Have a look at &lt;em&gt;Convert Hexagonal Grid Data to Square Grid Data&lt;/em&gt; filter, which also allows for batch conversion of many files.&lt;/p&gt;

&lt;h2 id=&quot;clean-up&quot;&gt;Clean-up&lt;/h2&gt;

&lt;p&gt;Experimental EBSD maps often contain inaccurate pixels which are undesirable in the FE model to be generated. The following pixels can be considered as “undesirable”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;non-indexed pixels&lt;/li&gt;
  &lt;li&gt;pixels with low confidence index (CI)&lt;/li&gt;
  &lt;li&gt;pixels that belong to unreasonably tiny “grains” (which result in the presence of numerous  grains that consist of only one or two pixels)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non-indexed and low-quality pixels can be removed with the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;nonIndexed&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minCI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;minCI&lt;/code&gt; is the threshold CI such as 0.1.&lt;/p&gt;

&lt;p&gt;Getting rid of pixels that belong to unreasonably tiny “grains” require prior grain segmentation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grainId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mis2mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calcGrains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;angle&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;degree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;angle&lt;/code&gt; being the disorientation angle for thresholding grains (e.g. 15).&lt;/p&gt;

&lt;p&gt;After grain segmentation, such “bad” pixels can be removed as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;indSmallSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grainSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indSmallSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;automating-the-clean-up&quot;&gt;Automating the clean-up&lt;/h3&gt;

&lt;p&gt;Since we are likely to do some clean-up routine over and over again, it is a good idea to put such routine to a separate function.&lt;/p&gt;

&lt;p&gt;As an example, I organized my cleaning routine into a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;clean4fem&lt;/code&gt; (available on GitHub &lt;a href=&quot;https://github.com/latmarat/ebsd2abaqus/blob/master/clean4fem.m&quot;&gt;here&lt;/a&gt;). This function excludes the “bad” pixels mentioned above – non-indexed, with low CI, and of tiny grains. In addition, the script fills the removed pixels with phase ID, grain ID, and orientations equal to those of the grain surrounding these removed pixels.&lt;/p&gt;

&lt;p&gt;Finally, for control purposes, the script plots three maps: raw EBSD data, data with inaccurate pixels removed, and finally the cleaned map with filled pixels (see &lt;strong&gt;Example&lt;/strong&gt; section).&lt;/p&gt;

&lt;p&gt;Typical use of this function will be as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean4fem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minCI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;minSize&lt;/code&gt; – is the size of the grain in pixels below which grains are considered unreasonable, &lt;code class=&quot;highlighter-rouge&quot;&gt;minCI&lt;/code&gt; – min confidence index to keep, &lt;code class=&quot;highlighter-rouge&quot;&gt;angle&lt;/code&gt; – disorientation angle for grain segmentation.&lt;/p&gt;

&lt;h2 id=&quot;crop&quot;&gt;Crop&lt;/h2&gt;

&lt;p&gt;Sometimes only a certain region of EBSD map is of interest for FE analysis. In such cases, EBSD maps can be cropped by logical indexing based on coordinates.&lt;/p&gt;

&lt;p&gt;For example, if the EBSD map is 30 &lt;script type=&quot;math/tex&quot;&gt;\mu m&lt;/script&gt; along &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and 15 &lt;script type=&quot;math/tex&quot;&gt;\mu m&lt;/script&gt; along &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; and suppose only one half (along &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;) of the map is of interest, the map can be cropped by the following commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A more arbitrary region can be also cropped:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;inpolygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Refer to MTEX manual to learn more about &lt;a href=&quot;http://mtex-toolbox.github.io/files/doc/EBSDModifyData.html#9&quot;&gt;selecting a certain region&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Pro-tip&lt;/strong&gt;: it is a good idea to do cropping first of all because it will save a lot of computational cost: any processing is much faster on a smaller map!&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;p&gt;Let’s try the workflow described above on realistic EBSD data, for example, on &lt;strong&gt;Forsterite&lt;/strong&gt; dataset pre-packaged with MTEX.&lt;/p&gt;

&lt;h3 id=&quot;loading-the-data&quot;&gt;Loading the data&lt;/h3&gt;

&lt;p&gt;To load the &lt;strong&gt;Forsterite&lt;/strong&gt; dataset, simply run the following in MATLAB command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;mtexdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forsterite&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result of this command, the raw EBSD data is loaded into variable &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd&lt;/code&gt;, whose visualization using&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;nb&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will look as shown below.&lt;/p&gt;

&lt;figure&gt;
	&lt;a href=&quot;https://farm8.staticflickr.com/7666/28178489705_262f82b54b_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7666/28178489705_262f82b54b_z_d.jpg&quot; alt=&quot;Raw EBSD map&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Raw Forsterite EBSD map.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here we can see a high-resolution map with several phases and many non-indexed pixels. A perfect dataset to test our framework!&lt;/p&gt;

&lt;h3 id=&quot;cropping-the-map&quot;&gt;Cropping the map&lt;/h3&gt;

&lt;p&gt;The loaded EBSD map has 245,952 pixels, which is a bit overwhelming for FE analysis so let’s crop the EBSD map, say, to a quarter of the original map along &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; axis and to a half along &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;cleaning-up&quot;&gt;Cleaning-up&lt;/h3&gt;

&lt;p&gt;Now let’s clean our map using the mentioned helper function &lt;code class=&quot;highlighter-rouge&quot;&gt;clean4fem&lt;/code&gt;, with the following settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;minimum allowed quality: &lt;code class=&quot;highlighter-rouge&quot;&gt;mad = 0.1&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;minimum allowed grain size: &lt;code class=&quot;highlighter-rouge&quot;&gt;5 px&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;disorientation angle for grain segmentation: 15 degrees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be accomplished with the following command (provided &lt;code class=&quot;highlighter-rouge&quot;&gt;clean4fem&lt;/code&gt; is placed into MATLAB path)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean4fem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;15.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The changes that the EBSD map undergoes are shown in the figure below.&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://farm9.staticflickr.com/8768/27648657834_7b4d4bc106_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8768/27648657834_7b4d4bc106_z_d.jpg&quot; alt=&quot;Raw cropped map&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://farm9.staticflickr.com/8596/27648657864_59fb769ac1_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8596/27648657864_59fb769ac1_z_d.jpg&quot; alt=&quot;Map with bad pixels removed&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://farm8.staticflickr.com/7619/27983176050_dd0da6d1f7_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7619/27983176050_dd0da6d1f7_z_d.jpg&quot; alt=&quot;Cleaned and filled map&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Changes of the EBSD map that takes place in clean4fem: i) raw cropped data, ii) &quot;bad&quot; pixels removed, iii) filled missing and removed pixels.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Looks like our cleaning routine did not produce significant artifacts (at least in terms of the phase distribution) and resulted in a reasonable final EBSD map so that we can move on to mesh generation.&lt;/p&gt;

&lt;h3 id=&quot;mesh-generation-1&quot;&gt;Mesh generation&lt;/h3&gt;

&lt;p&gt;Now our EBSD data is ready for mesh generation, which, after &lt;a href=&quot;(https://github.com/latmarat/ebsd2abaqus/archive/master.zip)&quot;&gt;downloading&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus&lt;/code&gt; script, is as simple as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ebsd2abaqus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ebsd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where, again, &lt;code class=&quot;highlighter-rouge&quot;&gt;angle&lt;/code&gt; is the disorientation angle in degrees for grain segmentation, e.g. 15.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;em&gt;&lt;strong&gt;Caveat&lt;/strong&gt;&lt;/em&gt;: pass the segmentation angle without &lt;code class=&quot;highlighter-rouge&quot;&gt;degree&lt;/code&gt; variable, i.e. for angle of 15 the function call is &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus(ebsd,15.0)&lt;/code&gt;, just like in the case of &lt;code class=&quot;highlighter-rouge&quot;&gt;clean4fem&lt;/code&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;data-checks-in-ebsd2abaqus&quot;&gt;Data checks in &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;An important thing to keep in mind is that the script performs two checks of the data&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Whether or not EBSD is on hexagonal grid&lt;/li&gt;
  &lt;li&gt;Whether or not EBSD has non-indexed pixels&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If any of these conditions are true, the script will call MTEX function &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; to convert the data to a square grid or to fill the non-indexed pixels. The script will inform the user if the &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; function was used and which of the conditions (grid or non-indexed pixels) was the reason.&lt;/p&gt;

&lt;p&gt;For example, despite cleaning with &lt;code class=&quot;highlighter-rouge&quot;&gt;clean4fem&lt;/code&gt; function, our EBSD map of forsterite still had some non-indexed pixels at the corners of the map and &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus&lt;/code&gt; displayed the following warning message&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
WARNING! EBSD had 54 non-indexed pixels and so was filled using fill function
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since it is only 54 pixels located at the corners, the final EBSD map should be fine and we can use the generated mesh for simulations. However if there are many non-indexed pixels (e.g. when the script is used without prior cleaning), it is better to check if the EBSD map after filling does not have significant artifacts.&lt;/p&gt;

&lt;p&gt;Similarly, if we feed an EBSD map measured on hexagonal grid to &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus&lt;/code&gt;, the script will automatically convert it to a square grid using the same &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; function and show a warning:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
WARNING! EBSD was on hex grid and so was converted to sqr grid using fill function
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If this is the case, again, it is worth checking if the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;fill&lt;/code&gt; function does not lead to significant distortions in the EBSD data.&lt;/p&gt;

&lt;h3 id=&quot;the-mesh-in-abaquscae&quot;&gt;The mesh in ABAQUS/CAE&lt;/h3&gt;

&lt;p&gt;The generated &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd.inp&lt;/code&gt; contains the following&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mesh (nodes and elements)&lt;/li&gt;
  &lt;li&gt;Element Sets for grains and phases&lt;/li&gt;
  &lt;li&gt;Sections for phases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In ABAQUS/CAE, the generated mesh consisting of 30,744 C3D8 elements looks as shown below.&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;https://farm9.staticflickr.com/8768/27648657834_7b4d4bc106_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8768/27648657834_7b4d4bc106_z_d.jpg&quot; alt=&quot;Raw cropped map&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://farm8.staticflickr.com/7619/27983176050_dd0da6d1f7_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7619/27983176050_dd0da6d1f7_z_d.jpg&quot; alt=&quot;Cleaned and filled map&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;https://farm9.staticflickr.com/8566/28187499371_0ba97f5602_z_d.jpg&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8566/28187499371_0ba97f5602_z_d.jpg&quot; alt=&quot;Map with bad pixels removed&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;The final mesh in ABAQUS/CAE color-coded according to phase sets (iii) alongside with the raw EBSD map (i) and the cleaned EBSD map (ii).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Whereas the model tree in ABAQUS/CAE looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Parts
└── SAMPLE
    └── Sets
    	├── ALLELEMENTS           &lt;span class=&quot;c&quot;&gt;# Element set containing all the elements&lt;/span&gt;
    	├── ALLNODES              &lt;span class=&quot;c&quot;&gt;# Node set containing all the nodes&lt;/span&gt;
    	├── GRAIN-1               &lt;span class=&quot;c&quot;&gt;# Element set constituting GRAIN-1&lt;/span&gt;
    	├── GRAIN-2               &lt;span class=&quot;c&quot;&gt;# Element set constituting GRAIN-2&lt;/span&gt;
    	├── ...                   &lt;span class=&quot;c&quot;&gt;# etc.&lt;/span&gt;
    	├── NODES+1               &lt;span class=&quot;c&quot;&gt;# Node set containing nodes on the face of +X&lt;/span&gt;
    	├── NODES+2               &lt;span class=&quot;c&quot;&gt;# Node set containing nodes on the face of +Y&lt;/span&gt;
    	├── NODES+3               &lt;span class=&quot;c&quot;&gt;# Node set containing nodes on the face of +Z&lt;/span&gt;
    	├── ...                   &lt;span class=&quot;c&quot;&gt;# etc.&lt;/span&gt;
    	├── PHASE-DIOPSIDE        &lt;span class=&quot;c&quot;&gt;# Element set constituting phase diopside&lt;/span&gt;
    	├── PHASE-ENSTATITE       &lt;span class=&quot;c&quot;&gt;# Element set constituting phase enstatite&lt;/span&gt;
    	└── PHASE-FORSTERITE      &lt;span class=&quot;c&quot;&gt;# Element set constituting phase forsterite&lt;/span&gt;
Materials                         &lt;span class=&quot;c&quot;&gt;# Create materials with phase names as material names&lt;/span&gt;
Sections                          &lt;span class=&quot;c&quot;&gt;# Sections for phases&lt;/span&gt;
	├── Section-1-PHASE-FORSTERITE
	├── Section-2-PHASE-ENSTATITE
	└── Section-3-PHASE-DIOPSIDE

Step                              &lt;span class=&quot;c&quot;&gt;# Create step, BCs, etc.&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The sections for phases are created assuming that there will be a material for each phase so that for this model we need to create three materials: &lt;em&gt;Forsterite&lt;/em&gt;, &lt;em&gt;Enstatite&lt;/em&gt;, and &lt;em&gt;Diopside&lt;/em&gt; with the desired properties. Finally once we define all the other ingredients – step, boundary conditions, output, we are ready to run the microstructure-based simulations!&lt;/p&gt;

&lt;h1 id=&quot;citation&quot;&gt;Citation&lt;/h1&gt;

&lt;p&gt;The script presented here is a by-product of one of my short-term research projects – on medium manganese steel – while I was at POSTECH. You can find the publication resulting from this project (and showing &lt;code class=&quot;highlighter-rouge&quot;&gt;ebsd2abaqus&lt;/code&gt; in action) &lt;a href=&quot;https://dx.doi.org/10.1016/j.actamat.2016.02.001&quot;&gt;here&lt;/a&gt;. Feel free to cite the paper (or even this post) if you like.&lt;/p&gt;

&lt;p&gt;Bibtex entry:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;@article
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Latypov2016,
author = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Latypov, M.I. and Shin, S. and &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;De Cooman&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;, B.C. and Kim, H.S.&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
doi = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;10.1016/j.actamat.2016.02.001&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
issn = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;13596454&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
journal = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Acta Materialia&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
keywords = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Finite element methods,Medium Mn steel,Strain partitioning,TWIP+TRIP&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
pages = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;219--228&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
title = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Micromechanical finite element analysis of strain partitioning in multiphase medium manganese TWIP+TRIP steel&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
volume = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;108&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;,
year = &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;2016&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h1&gt;

&lt;p&gt;Thanks are due to Ralf Hielscher for &lt;a href=&quot;https://groups.google.com/d/msg/mtexmail/MPG0SffjR6o/z1vmzHEyCAAJ&quot;&gt;explanations&lt;/a&gt; on grid checks and conversion.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/ebsd2abaqus/&quot;&gt;ABAQUS mesh from EBSD using MTEX&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on July 12, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Research Overview]]></title>
 <link rel="alternate" type="text/html" href="/slides/research-july-2016/" />
  <id>/slides/research-july-2016</id>
  <updated>2016-06-28T00:00:00-00:00</updated>
  <published>2016-07-01T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide01.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide02.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide03.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide04.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide05.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide06.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide07.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide08.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide09.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide10.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide12.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide13.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide14.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide15.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide16.png&quot; data-background-size=&quot;contain&quot;&gt;

&lt;div class=&quot;column&quot; style=&quot;float:right; width: 50%&quot;&gt;
&lt;table&gt;

&lt;tr&gt;
&lt;td&gt;
&lt;img class=&quot;plain&quot; src=&quot;/images/2016-07-01-presentation/img/tex-1.gif&quot; height=&quot;200&quot; alt=&quot;simulation for region 1&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
&lt;img class=&quot;plain&quot; src=&quot;/images/2016-07-01-presentation/img/tex-2.gif&quot; height=&quot;200&quot; alt=&quot;simulation for region 2&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;
&lt;img class=&quot;plain&quot; src=&quot;/images/2016-07-01-presentation/img/tex-3.gif&quot; height=&quot;200&quot; alt=&quot;simulation for region 3&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;
&lt;/div&gt;

&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide17.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;style&gt;.header6 header:after { content: &quot;Decoupled FE + CPFE simuations&quot;; }&lt;/style&gt;

&lt;section data-state=&quot;header6&quot; data-background-video=&quot;/images/2016-07-01-presentation/img/ecap.webm&quot; data-background-video-loop=&quot;true&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide19.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide20.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide21.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide22.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide23.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide24.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide25.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide26.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide27.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide28.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide29.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide30.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide31.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide32.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide33.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide34.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide35.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide36.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide37.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide38.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide39.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide40.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide41.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide42.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide43.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide44.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide45.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide46.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide47.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide48.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide49.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide50.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide51.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide52.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide53.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide54.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section&gt;

&lt;h5&gt;Interactive representation of microstructures&lt;/h5&gt;
&lt;p&gt;&lt;i&gt;Hover or click on data points&lt;/i&gt;&lt;/p&gt;

&lt;style&gt;
.axis path,
.axis line {
fill: none;
stroke: black;
shape-rendering: crispEdges;
}
.axis text {
font-family: sans-serif;
font-size: 11px;
}

&lt;/style&gt;

&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/images/2016-07-01-presentation/scripts.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;column&quot; style=&quot;float:left; width: 50%&quot; id=&quot;left&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;column&quot; style=&quot;float:right; width: 50%&quot; id=&quot;right&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;author&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;link&quot;&gt;&lt;/div&gt;

&lt;script&gt;

d3.json(&#39;/images/2016-07-01-presentation/data/ldr.json&#39;,function(error, json) {
  if (error) return console.warn(error);
  data = json
  plotLDR(data);
})
&lt;/script&gt;

&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide55.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide56.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide57.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide58.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;h2&gt;References and links&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;b&gt;Materials Informatics in general&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1016/B978-0-12-410394-8.00009-6&quot;&gt;S.R. Kalidindi, Hierarchical Materials Informatics: Novel Analytics for Materials Data, 2015&lt;/a&gt; (book)
  &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Two-point statistics&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1186/s40192-015-0044-x&quot;&gt;Cecen, Fast, and Kalidindi, &lt;i&gt;IMMI&lt;/i&gt; 5 (2016) 1-15&lt;/a&gt;
  &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Homogenization&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1016/j.actamat.2015.02.045&quot;&gt;Gupta et al., &lt;i&gt;Acta Mater.&lt;/i&gt; 91 (2015) 239-254.&lt;/a&gt;
  &lt;/li&gt;

  &lt;li&gt;&lt;b&gt;Spherical nanoindentation&lt;/b&gt;:&lt;br /&gt;
  &lt;a href=&quot;https://dx.doi.org/10.1016/j.mser.2015.02.001&quot;&gt;Pathak and Kalidindi, &lt;i&gt;MSE R: Reports&lt;/i&gt; 91 (2015) 1-36.&lt;/a&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
# Thank you

-------
[mined.gatech.edu](http://mined.gatech.edu)

[latmarat.net](http://latmarat.net)
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;
# Supporting slides
&lt;/section&gt;

&lt;section data-background=&quot;/images/2016-07-01-presentation/slides/Slide59.png&quot; data-background-size=&quot;contain&quot;&gt;
&lt;/section&gt;

    &lt;p&gt;&lt;a href=&quot;/slides/research-july-2016/&quot;&gt;Research Overview&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on July 01, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[D3 js test]]></title>
 <link rel="alternate" type="text/html" href="/d3-test/" />
  <id>/d3-test</id>
  <updated>2016-06-28T00:00:00-00:00</updated>
  <published>2016-06-28T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;This post is a short tutorial to help getting started with crystal plasticity simulations of texture evolution during plastic deformation. It explains how to run a simple VPSC simulation and visualize the simulated texture in MTEX.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;style&gt;

.axis path,
.axis line {
fill: none;
stroke: black;
shape-rendering: crispEdges;
}
.axis text {
font-family: sans-serif;
font-size: 11px;
}

&lt;/style&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-md-5&quot; id=&quot;area1&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;col-md-6&quot; id=&quot;area2&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;https://d3js.org/d3.v4.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;

d3.csv(&#39;/pc-hst.csv&#39;, function (data) {
  // Variables
  var body = d3.select(&#39;div#area1&#39;)
	var margin = { top: 50, right: 50, bottom: 50, left: 50 }
	var h = 400 - margin.top - margin.bottom
	var w = 400 - margin.left - margin.right
	var formatFloat = d3.format(&#39;.2f&#39;)
  // Scales
  var colorScale = d3.scale.category20()
  var colors = d3.scale.linear()
    .domain([d3.min(data,function (d) { return +d.pc3 }), d3.max(data,function (d) { return +d.pc3 })])
    .range([&#39;#ffffff&#39;,&#39;#3399ff&#39;])
  var xScale = d3.scale.linear()
    .domain([
    	1.1*d3.min(data,function (d) { return +d.pc1 }),
    	1.1*d3.max(data,function (d) { return +d.pc1 })
    	])
    .range([0,w])
  var yScale = d3.scale.linear()
    .domain([
    	1.1*d3.min(data,function (d) { return +d.pc2 }),
    	1.1*d3.max(data,function (d) { return +d.pc2 })
    	])
    .range([h,0])
	// SVG
	var svg = body.append(&#39;svg&#39;)
	    .attr(&#39;height&#39;,h + margin.top + margin.bottom)
	    .attr(&#39;width&#39;,w + margin.left + margin.right)
	  .append(&#39;g&#39;)
	    .attr(&#39;transform&#39;,&#39;translate(&#39; + margin.left + &#39;,&#39; + margin.top + &#39;)&#39;)
	// X-axis
	var xAxis = d3.svg.axis()
	  .scale(xScale)
	  .tickFormat(formatFloat)
	  .ticks(5)
	  // .orient(&#39;bottom&#39;)
  // Y-axis
	var yAxis = d3.svg.axis()
	  .scale(yScale)
	  .tickFormat(formatFloat)
	  .ticks(5)
	  .orient(&#39;left&#39;)
  // Circles
  var circles = svg.selectAll(&#39;circle&#39;)
      .data(data)
      .enter()
    .append(&#39;circle&#39;)
      .attr(&#39;cx&#39;,function (d) { return xScale(d.pc1) })
      .attr(&#39;cy&#39;,function (d) { return yScale(d.pc2) })
      .attr(&#39;r&#39;,&#39;10&#39;)
      .attr(&#39;stroke&#39;,&#39;black&#39;)
      .attr(&#39;stroke-width&#39;,1)
      .attr(&#39;fill&#39;,function (d,i) { return colors(d.pc3) })
      .on(&#39;mouseover&#39;, function () {
        d3.select(this)
          .transition()
          .duration(500)
          .attr(&#39;r&#39;,20)
          .attr(&#39;stroke-width&#39;,3)
      })
      .on(&#39;mouseout&#39;, function () {
        d3.select(this)
          .transition()
          .duration(500)
          .attr(&#39;r&#39;,10)
          .attr(&#39;stroke-width&#39;,1)
      })
    .append(&#39;title&#39;) // Tooltip
      .text(function (d) { return d.pc1 +
                           &#39;\nPC 1: &#39; + formatFloat(d.pc1) +
                           &#39;\nPC 2: &#39; + formatFloat(d.pc2) +
                           &#39;\nPC 3: &#39; + formatFloat(d.pc3) })
  // X-axis
  svg.append(&#39;g&#39;)
      .attr(&#39;class&#39;,&#39;axis&#39;)
      .attr(&#39;transform&#39;, &#39;translate(0,&#39; + h + &#39;)&#39;)
      .call(xAxis)
    .append(&#39;text&#39;) // X-axis Label
      .attr(&#39;class&#39;,&#39;label&#39;)
      .attr(&#39;y&#39;,-10)
      .attr(&#39;x&#39;,w)
      .attr(&#39;dy&#39;,&#39;.71em&#39;)
      .style(&#39;text-anchor&#39;,&#39;end&#39;)
      .text(&#39;PC 1&#39;)
  // Y-axis
  svg.append(&#39;g&#39;)
      .attr(&#39;class&#39;, &#39;axis&#39;)
      .call(yAxis)
    .append(&#39;text&#39;) // y-axis Label
      .attr(&#39;class&#39;,&#39;label&#39;)
      .attr(&#39;transform&#39;,&#39;rotate(-90)&#39;)
      .attr(&#39;x&#39;,0)
      .attr(&#39;y&#39;,5)
      .attr(&#39;dy&#39;,&#39;.71em&#39;)
      .style(&#39;text-anchor&#39;,&#39;end&#39;)
      .text(&#39;PC 2&#39;)
})

&lt;/script&gt;

&lt;script&gt;

d3.csv(&#39;/pc-hst.csv&#39;, function (data) {
  // Variables
  var body = d3.select(&#39;div#area2&#39;)
	var margin = { top: 50, right: 50, bottom: 50, left: 50 }
	var h = 400 - margin.top - margin.bottom
	var w = 400 - margin.left - margin.right
	var formatFloat = d3.format(&#39;.2f&#39;)
  // Scales
  var colorScale = d3.scale.category20()
  var colors = d3.scale.linear()
    .domain([d3.min(data,function (d) { return +d.pc3 }), d3.max(data,function (d) { return +d.pc3 })])
    .range([&#39;#ffffff&#39;,&#39;#3399ff&#39;])
  var xScale = d3.scale.linear()
    .domain([
    	1.1*d3.min(data,function (d) { return +d.pc1 }),
    	1.1*d3.max(data,function (d) { return +d.pc1 })
    	])
    .range([0,w])
  var yScale = d3.scale.linear()
    .domain([
    	1.1*d3.min(data,function (d) { return +d.pc2 }),
    	1.1*d3.max(data,function (d) { return +d.pc2 })
    	])
    .range([h,0])
	// SVG
	var svg = body.append(&#39;svg&#39;)
	    .attr(&#39;height&#39;,h + margin.top + margin.bottom)
	    .attr(&#39;width&#39;,w + margin.left + margin.right)
	  .append(&#39;g&#39;)
	    .attr(&#39;transform&#39;,&#39;translate(&#39; + margin.left + &#39;,&#39; + margin.top + &#39;)&#39;)
	// X-axis
	var xAxis = d3.svg.axis()
	  .scale(xScale)
	  .tickFormat(formatFloat)
	  .ticks(5)
	  // .orient(&#39;bottom&#39;)
  // Y-axis
	var yAxis = d3.svg.axis()
	  .scale(yScale)
	  .tickFormat(formatFloat)
	  .ticks(5)
	  .orient(&#39;left&#39;)
  // Circles
  var circles = svg.selectAll(&#39;circle&#39;)
      .data(data)
      .enter()
    .append(&#39;circle&#39;)
      .attr(&#39;cx&#39;,function (d) { return xScale(d.pc1) })
      .attr(&#39;cy&#39;,function (d) { return yScale(d.pc2) })
      .attr(&#39;r&#39;,&#39;10&#39;)
      .attr(&#39;stroke&#39;,&#39;black&#39;)
      .attr(&#39;stroke-width&#39;,1)
      .attr(&#39;fill&#39;,function (d,i) { return colors(d.pc3) })
      .on(&#39;mouseover&#39;, function () {
        d3.select(this)
          .transition()
          .duration(500)
          .attr(&#39;r&#39;,20)
          .attr(&#39;stroke-width&#39;,3)
      })
      .on(&#39;mouseout&#39;, function () {
        d3.select(this)
          .transition()
          .duration(500)
          .attr(&#39;r&#39;,10)
          .attr(&#39;stroke-width&#39;,1)
      })
    .append(&#39;title&#39;) // Tooltip
      .text(function (d) { return d.pc1 +
                           &#39;\nPC 1: &#39; + formatFloat(d.pc1) +
                           &#39;\nPC 2: &#39; + formatFloat(d.pc2) +
                           &#39;\nPC 3: &#39; + formatFloat(d.pc3) })
  // X-axis
  svg.append(&#39;g&#39;)
      .attr(&#39;class&#39;,&#39;axis&#39;)
      .attr(&#39;transform&#39;, &#39;translate(0,&#39; + h + &#39;)&#39;)
      .call(xAxis)
    .append(&#39;text&#39;) // X-axis Label
      .attr(&#39;class&#39;,&#39;label&#39;)
      .attr(&#39;y&#39;,-10)
      .attr(&#39;x&#39;,w)
      .attr(&#39;dy&#39;,&#39;.71em&#39;)
      .style(&#39;text-anchor&#39;,&#39;end&#39;)
      .text(&#39;PC 1&#39;)
  // Y-axis
  svg.append(&#39;g&#39;)
      .attr(&#39;class&#39;, &#39;axis&#39;)
      .call(yAxis)
    .append(&#39;text&#39;) // y-axis Label
      .attr(&#39;class&#39;,&#39;label&#39;)
      .attr(&#39;transform&#39;,&#39;rotate(-90)&#39;)
      .attr(&#39;x&#39;,0)
      .attr(&#39;y&#39;,5)
      .attr(&#39;dy&#39;,&#39;.71em&#39;)
      .style(&#39;text-anchor&#39;,&#39;end&#39;)
      .text(&#39;PC 2&#39;)
})

&lt;/script&gt;


    &lt;p&gt;&lt;a href=&quot;/d3-test/&quot;&gt;D3 js test&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on June 28, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[New look of the blog]]></title>
 <link rel="alternate" type="text/html" href="/newlook/" />
  <id>/newlook</id>
  <updated>2015-05-17T00:00:00-00:00</updated>
  <published>2016-05-17T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;I am excited to introduce the new design of the blog – with more focus on the content – for a better reading experience. Enjoy!&lt;/p&gt;

&lt;p&gt;If, for some reason, you really miss the old design, it will be still available for a while at  &lt;a href=&quot;https://latmarat.github.io/old-blog/&quot;&gt;latmarat.net/old-blog/&lt;/a&gt; (though it is no longer updated).&lt;/p&gt;

&lt;p&gt;The link structure has changed so that some links (especially in google search) may have become broken. Check the &lt;a href=&quot;https://latmarat.github.io/blog/posts/&quot;&gt;&lt;strong&gt;index&lt;/strong&gt;&lt;/a&gt; to find the post you are looking for!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/newlook/&quot;&gt;New look of the blog&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on May 17, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Stress-strain data from ABAQUS simulations using Python]]></title>
 <link rel="alternate" type="text/html" href="/aba-ss/" />
  <id>/aba-ss</id>
  <updated>2015-05-12T00:00:00-00:00</updated>
  <published>2016-05-14T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;The post describes a Python script for obtaining stress–strain data from ABAQUS simulations with representative volume elements of heterogeneous microstructures.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;There are cases when you may not want to use ABAQUS/CAE to get stress–strain curves from your output database containing the finite element (FE) simulation results, such as&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The model is too big for ABAQUS/CAE to handle averaging over elements&lt;/li&gt;
  &lt;li&gt;You are tired of clicking on ABAQUS/CAE menu over and over again after each simulation run&lt;/li&gt;
  &lt;li&gt;You have many files to post-process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ABAQUS offers powerful scripting interface, which is a perfect solution for such cases.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;The scripts described here were written specifically for finite element (FE) simulations of deformation of representative volume elements (RVE) of polycrystalline or multiphase microstructures, where one usually has a single part deformed through velocities  or displacements applied on control nodes. Nevertheless, it is hoped that the scripts will be also useful for a more general class of FE simulations.&lt;/p&gt;

&lt;p&gt;With the deformation of an RVE in mind, the stress–strain data can be obtained by averaging components of the stress and strain tensors over all integration points in each element (in the case of full integration) and then over all elements in the model (or in a region of the model specified in an Element Set), i.e.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left &lt; S_{ij} \right &gt; = \frac{1}{N}\sum^N_{p=1} S_{ij}^p %]]&gt;&lt;/script&gt;

&lt;p&gt;for stress tensor and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left &lt; \varepsilon_{ij} \right &gt; = \frac{1}{N}\sum^N_{p=1} \varepsilon_{ij}^p %]]&gt;&lt;/script&gt;

&lt;p&gt;for strain tensor.&lt;/p&gt;

&lt;p&gt;Here &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the number of integration points in the model (or region of the model), &lt;script type=&quot;math/tex&quot;&gt;S_{ij}^p&lt;/script&gt; and  &lt;script type=&quot;math/tex&quot;&gt;\varepsilon_{ij}^p&lt;/script&gt; are the stress and strain tensor components at an integration point &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. Note that these equations assume that all elements are of identical size, otherwise it is necessary to introduce weights into the equations.&lt;/p&gt;

&lt;p&gt;Now as we have averaged components of the tensors, we can get equivalent stress and strain as follows:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\bar{q} = \sqrt{\frac{3}{2}\left &lt; S{ij} \right &gt; \left &lt; S_{ij} \right &gt;} %]]&gt;&lt;/script&gt;

&lt;p&gt;for stress and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\bar{\epsilon} = \sqrt{\frac{2}{3}\left &lt; \varepsilon_{ij} \right &gt; \left &lt; \varepsilon_{ij} \right &gt;} %]]&gt;&lt;/script&gt;

&lt;p&gt;for strain.&lt;/p&gt;

&lt;h1 id=&quot;implementation-in-python&quot;&gt;Implementation in Python&lt;/h1&gt;

&lt;p&gt;The calculation described above is implemented in a Python function called &lt;code class=&quot;highlighter-rouge&quot;&gt;odb2ss&lt;/code&gt; available on GitHub &lt;a href=&quot;https://github.com/latmarat/abaqus-py/blob/master/aba-ss.py&quot;&gt;here&lt;/a&gt;. To get the equivalent stress and strain for all time frames available in your odb, call of the function will look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;eqStress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eqStrain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odb2ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;fname&lt;/code&gt; is the file name of the output database (without extension, e.g. &lt;em&gt;‘test’&lt;/em&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceName&lt;/code&gt; is the Instance name of your part of interest (e.g. &lt;em&gt;‘PART-1-1’&lt;/em&gt;), and &lt;code class=&quot;highlighter-rouge&quot;&gt;setName&lt;/code&gt; is the name of the Element Set that contains the region for which calculations shall be done.&lt;/p&gt;

&lt;p&gt;As a result of this function call, you will have equivalent stress and strain stored in variables &lt;code class=&quot;highlighter-rouge&quot;&gt;eqStress&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;eqStrain&lt;/code&gt;. You can plot them immediately in Python if you have &lt;a href=&quot;http://matplotlib.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;&lt;/a&gt; module installed or just save the data to a text file and plot it using your favorite software. To save the data to a text file, add the following line to the script.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savetxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txtFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eqStrain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eqStress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;batch-post-processing&quot;&gt;Batch post-processing&lt;/h1&gt;

&lt;p&gt;If you have a bunch of output databases (i.e. odb files) for which you want to get stress–strain data, copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;aba-ss.py&lt;/code&gt; file to the folder containing your odb files and add a snippet that finds all the odb files and calls &lt;code class=&quot;highlighter-rouge&quot;&gt;odb2ss&lt;/code&gt; function in a &lt;em&gt;for&lt;/em&gt;-loop over all odb files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;glob&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Find odb files&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;files2search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;*.odb&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;odbFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files2search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;odbFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Start a loop over odb files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odbFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Get file name without extension&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Get equivalent stress, strain from odb&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;eqStress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eqStrain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odb2ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# Save results to npy&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savetxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;.out&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eqStrain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eqStress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;some-caveats-and-features&quot;&gt;Some caveats and features&lt;/h1&gt;

&lt;p&gt;Here are a couple of useful things to know about &lt;code class=&quot;highlighter-rouge&quot;&gt;odb2ss&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;stress-and-strain-measures&quot;&gt;Stress and strain measures&lt;/h2&gt;

&lt;p&gt;In this implementation, equivalent stresses and strains are calculated from stress and strain tensors stored in ABAQUS output field variables &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LE&lt;/code&gt; (logarithmic strain). If you are happy with this choice, you need to request field output for these variables with a desired frequency before running the FE simulation.&lt;/p&gt;

&lt;p&gt;Here is a portion of the input file responsible for field output and example of the element output request containing &lt;code class=&quot;highlighter-rouge&quot;&gt;LE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
** FIELD OUTPUT: STR-STR
**
*Output, field, time interval=1.0
*Node Output
U,
*Element Output, directions=YES
EE, ER, LE, PE, PEEQ, S
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To calculate equivalent strain from any other strain tensor, replace &lt;code class=&quot;highlighter-rouge&quot;&gt;LE&lt;/code&gt; with the desired variable in the following line in &lt;code class=&quot;highlighter-rouge&quot;&gt;odb2ss&lt;/code&gt; function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Get strain&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;varName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;LE&#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# put your favorite strain tensor here&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSymTensorData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;varName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFullTensorData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, you can access any other tensor or scalar field data from the odb for purposes other than getting the stress–strain curve. For scalars, there is a function &lt;code class=&quot;highlighter-rouge&quot;&gt;getScalarData&lt;/code&gt; in the same Python file, which will return a scalar quantity averaged over all elements in the requested element set.&lt;/p&gt;

&lt;h2 id=&quot;run-time-messages&quot;&gt;Run-time messages&lt;/h2&gt;

&lt;p&gt;The script writes some runtime messages to a file &lt;code class=&quot;highlighter-rouge&quot;&gt;odb_aba-ss.txt&lt;/code&gt; created in the folder where &lt;code class=&quot;highlighter-rouge&quot;&gt;aba-ss.py&lt;/code&gt; was run. In this file, you can see some useful information, such as, for which Step and  Instance the calculations are carried out as well as how many time frames are available in your odb.&lt;/p&gt;

&lt;p&gt;Here is an example of run-time messages if the script has completed with no errors&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
odb was successfully opened at test.odb
Working with step Deformation and instance PART-1-1
Number of frames: 3
Current time frame:  0.0000
Current time frame:  1.0000
Current time frame:  2.0000
Done with test, spent 6.86 min
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The script will also try to catch the most frequent errors – Instance and Element Set specified do not exist in the odb. If these errors happen, the script will say so in this text file and will tell you the right names of the Instances and Sets available in the odb.&lt;/p&gt;

&lt;h2 id=&quot;default-values-for-instance-and-set&quot;&gt;Default values for instance and set&lt;/h2&gt;

&lt;p&gt;The function is defined with &lt;em&gt;‘ALLELEMENTS’&lt;/em&gt; as a default name of the Element Set name for which calculation is performed. Also, the first Instance available in the odb is chosen as default. For example, if I have an odb with a single Instance &lt;em&gt;PART-1-1&lt;/em&gt;, the following two calls of the function will yield exactly the same results&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;eqStress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eqStrain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odb2ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;PART-1-1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;ALLELEMENTS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;eqStress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eqStrain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odb2ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I have the first Instance and &lt;em&gt;‘ALLELEMENTS’&lt;/em&gt; Set as default simply because, in most cases, I have a single part and thus a single Instance (my RVE) and &lt;em&gt;‘ALLELELEMENTS’&lt;/em&gt; is the Element Set that for which I want to do the calculation most frequently (i.e. over the whole RVE). You can easily change them to your favorite Instance and Element Set names in the following lines of the code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# The first instance is default if None provided&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;instanceName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myOdb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootAssembly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# put your favorite instance here&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# &#39;AllElements&#39; set is default if None provided&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mySetName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mySetName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;ALLELEMENTS&#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# put your favorite element set here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;ps-running-python-scripts-in-abaqus&quot;&gt;P.S. Running Python scripts in ABAQUS&lt;/h1&gt;

&lt;p&gt;If you are not sure how to run the scripts described above, here is a tip. There are two options in running Python scripts in ABAQUS environment.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From ABAQUS command line:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
abaqus viewer noGUI=script.py
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;From ABAQUS/CAE:
 Go to &lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;Run Script…&lt;/em&gt; and navigate to the script  you need, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;aba-ss.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Final note&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;aba-ss.py&lt;/code&gt; may not work in old versions of ABAQUS that do not have numpy module in their Python distribtutions.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/aba-ss/&quot;&gt;Stress-strain data from ABAQUS simulations using Python&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on May 14, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[ABAQUS volumetric mesh from Dream.3D surface mesh]]></title>
 <link rel="alternate" type="text/html" href="/dream2abatet/" />
  <id>/dream2abatet</id>
  <updated>2016-01-18T00:00:00-00:00</updated>
  <published>2016-01-18T00:00:00+01:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;The post describes a MATLAB script for obtaining ABAQUS tetrahedral volume mesh from surface mesh of grain boundaries generated in Dream.3D.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;In the &lt;a href=&quot;http://latmarat.net/blog/dream2abahex/&quot;&gt;previous post&lt;/a&gt;, I described a MATLAB script to write hexahedral ABAQUS mesh for a microstructure generated in Dream.3D. Brick elements make for a good mesh quality and thus a decent numerical stability of finite element simulations. At the same time, the use of brick elements inevitably leads to ladder-shaped grain boundaries.&lt;/p&gt;

&lt;p&gt;Sometimes, it is desired to include the effect of the intricate curvature of grain boundaries in finite element simulations. For example, with realistic grain boundaries incorporated in the finite element models, it is possible to track the evolution of grain boundary facet normals or even grain boundary character disribution during plastic deformation (see &lt;a href=&quot;http://dx.doi.org/10.1016/j.cma.2014.05.003&quot;&gt;&lt;em&gt;Knezevic et al., 2014&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Dream.3D currently allows for meshing grain boundaries by triangular elements (see &lt;a href=&quot;http://dx.doi.org/10.1088/0965-0393/22/2/025017&quot;&gt;&lt;em&gt;Lee et al., 2014&lt;/em&gt;&lt;/a&gt; for details). It is often a challenge to produce volume mesh from surface mesh of grain boundaries, which may require commercial software.&lt;/p&gt;

&lt;p&gt;This post describes an alternative method based on an open-source MATLAB toolbox for grain boundary-conformed mesh generation. The described method requires running a single MATLAB script that writes mesh into a text file that can be readily imported in ABAQUS.&lt;/p&gt;

&lt;h2 id=&quot;the-script&quot;&gt;The script&lt;/h2&gt;

&lt;p&gt;The MATLAB script presented here does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reads nodes, triangles of surface mesh and feature centroids generated in &lt;a href=&quot;http://dream3d.bluequartz.net/&quot;&gt;Dream.3D&lt;/a&gt; (ver. 4.2.x)&lt;/li&gt;
  &lt;li&gt;Generates volume tetrahedral mesh using &lt;a href=&quot;http://iso2mesh.sf.net&quot;&gt;iso2mesh&lt;/a&gt; toolbox&lt;/li&gt;
  &lt;li&gt;Writes the generated mesh into a file in ABAQUS input file format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://farm1.staticflickr.com/678/22464316136_3b726c739e_o_d.png&quot; alt=&quot;Surface to volume&quot; /&gt;
&lt;img src=&quot;https://farm6.staticflickr.com/5768/22476919562_704bd12470_o_d.png&quot; alt=&quot;ABAQUS mesh&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use the script, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download &lt;a href=&quot;http://iso2mesh.sf.net&quot;&gt;iso2mesh&lt;/a&gt; toolbox and add it to MATLAB path&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/latmarat/dream2abatet/archive/master.zip&quot;&gt;Download &lt;code class=&quot;highlighter-rouge&quot;&gt;dream2abatet.m&lt;/code&gt;&lt;/a&gt; script and put it to a MATLAB folder&lt;/li&gt;
  &lt;li&gt;Run Dream.3D pipeline to write nodes, triangles, features files&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;dream2abatet.m&lt;/code&gt; script pointing to the three Dream.3D files&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/latmarat/dream2abatet&quot;&gt;My repository&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;dream2abatet&lt;/code&gt; script contains a set of example files for testing and getting familiar with the framework. The files that can be used for a test run of the script are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ex_nodes.in&lt;/li&gt;
  &lt;li&gt;ex_tri.in&lt;/li&gt;
  &lt;li&gt;ex_features.in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use them to generate your first mesh as follows&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download the repo, extract the files to a MATLAB folder.&lt;/li&gt;
  &lt;li&gt;Run&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;dream2abatet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ex_nodes.in&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ex_tri.in&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ex_features.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in MATLAB and you should get a file &lt;code class=&quot;highlighter-rouge&quot;&gt;dream.inp&lt;/code&gt; containing your mesh. Check it in ABAQUS/CAE by setting colors in the Viewer according to Sets. The result should look like the image above.&lt;/p&gt;

&lt;p&gt;The repository also contains an example Dream.3D (ver. 4.2.5) pipeline - &lt;code class=&quot;highlighter-rouge&quot;&gt;ex_pipe.txt&lt;/code&gt;, which writes the &lt;code class=&quot;highlighter-rouge&quot;&gt;ex_nodes.in&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ex_tri.in&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ex_features.csv&lt;/code&gt; files for a 32x32x32 single-phase microstructure grid.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Both Dream.3D and iso2mesh allow for smoothing of the surface mesh. Furthermore, the function of &lt;code class=&quot;highlighter-rouge&quot;&gt;iso2mesh&lt;/code&gt; toolbox responsible for the mesh generation takes several parameters as input, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;keepRatio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;maxVolElement&lt;/code&gt; – the number of surface elements to be preserved during volume mesh generation and the maximum volume of the tetrahedral element (set as 0.75 and 0.5 in the example above). You can go through the documentation of both software packages to get familiar with the meshing and smoothing parameters as well as to experiment with them until a satisfactory mesh quality is achieved.&lt;/p&gt;

&lt;h2 id=&quot;known-limitations&quot;&gt;Known limitations&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The script requires grain centroids. The only option to export centroids in Dream.3D ver. 4.2.x seems to be Write Goal Attributes in &lt;em&gt;Pack Primary Phases&lt;/em&gt; filter. Since the generated microstructure does not necessarily match the goal attributes exactly, some grains may be missing in ABAQUS sets.&lt;/li&gt;
  &lt;li&gt;The workflow does not work well with periodic boundaries set in Dream.3D: either generation of volume mesh will fail or the number of missing grains in ABAQUS sets will increase.&lt;/li&gt;
  &lt;li&gt;Generation of volume mesh may fail for some microstructures (Invalid PLC error). In such cases, rerun Dream.3D pipeline and try again or try different Dream.3D settings.&lt;/li&gt;
  &lt;li&gt;No information on phases will be passed to ABAQUS in the current version of the script.&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;/dream2abatet/&quot;&gt;ABAQUS volumetric mesh from Dream.3D surface mesh&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on January 18, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[ABAQUS hexahedral mesh and grain orientations from Dream.3D]]></title>
 <link rel="alternate" type="text/html" href="/dream2abahex/" />
  <id>/dream2abahex</id>
  <updated>2015-10-19T00:00:00-00:00</updated>
  <published>2015-10-19T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;The post describes a MATLAB script for writing ABAQUS hexahedral finite element mesh and Euler angles from synthetic microstructures generated in Dream.3D.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;One of the great features of &lt;a href=&quot;http://dream3d.bluequartz.net&quot;&gt;Dream.3D&lt;/a&gt; is the generation of synthetic microstructures. It allows for virtual experiments with 3D microstructures as well as for studying the effects of various microstructural features on the full-field stress–strain distributions or effective mechanical characteristics of representative volume elements.&lt;/p&gt;

&lt;p&gt;To facilitate such micromechanical studies, Dream.3D (starting from ver. 6.1.77) &lt;a href=&quot;http://dream3d.bluequartz.net/?p=481&quot;&gt;introduced&lt;/a&gt; a filter called &lt;em&gt;Abaqus Hexahedron Writer&lt;/em&gt;, which writes a set of ABAQUS input files containing a mesh of eight-node brick elements grouped in Element Sets (and Sections for assignment of material properties) that represent grains (“Features” in Dream.3D terminology).&lt;/p&gt;

&lt;p&gt;Until now, however, &lt;em&gt;Abaqus Hexahedron Writer&lt;/em&gt;  filter does not allow for export of grain orientations along with the ABAQUS input files. This post describes a work-around for writing grain orientations to a text file in addition to ABAQUS hexahedral mesh.&lt;/p&gt;

&lt;h1 id=&quot;workflow&quot;&gt;Workflow&lt;/h1&gt;

&lt;p&gt;The workflow suggested here is very simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generate your synthetic microstructure in Dream.3D&lt;/li&gt;
  &lt;li&gt;Write microstructure information as a grid of voxels to a text file (&lt;em&gt;Write Los Alamos FFT file&lt;/em&gt; filter)&lt;/li&gt;
  &lt;li&gt;Use my &lt;code class=&quot;highlighter-rouge&quot;&gt;dream2abahex&lt;/code&gt; MATLAB script to write mesh file and grain orientations file based on the information in the Los Alamos FFT file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the core of this work-around is a custom MATLAB script called &lt;a href=&quot;https://github.com/latmarat/dream3d-converters/blob/master/dream2abahex.m&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dream2abahex&lt;/code&gt;&lt;/a&gt;. This script writes coordinates of eight nodes around each voxel in the Los Alamos FFT grid and writes instructions how these nodes should be connected to form eight-node brick (C3D8) elements. Furthermore, the script preserves the information about grain IDs using Element Sets and phase IDs using both Element Sets and Sections. The choice to pass &lt;em&gt;phases&lt;/em&gt; (rather than grains) as Sections is associated with the expectation that material properties will vary from phase to phase rather than from grain to grain.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Tip&lt;/strong&gt;: it is quite straightforward to change this choice if your user material subroutine supposes that material properties differ from grain to grain and thus requires an individual Section for each grain.&lt;/p&gt;

&lt;p&gt;Finally, and most importantly, the script writes Euler angles (which were read from the FFT file) for each element as a look-up table to a new text file. These orientations can be read from FORTRAN user subroutine defining the behavior of the material (e.g. UMAT).&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Tip&lt;/strong&gt;: as a bonus, the script creates Sets of nodes laying on all 6 faces of the representative volume so that Boundary Conditions can be readily defined on these nodes. Created Node Sets are named according to the face normals, e.g. nodes laying on the face whose normal is +X are contained in Node Set called “NODES+1”, nodes laying on the face whose normal is -Z is contained in “NODES-3”, etc.&lt;/p&gt;

&lt;h1 id=&quot;usage&quot;&gt;Usage&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/latmarat/dream3d-converters/blob/master/dream2abahex.m&quot;&gt;Download&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;dream2abahex&lt;/code&gt; script from GitHub, place it to a folder known to MATLAB and run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;dream2abahex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;path/to/fft/micro.vox&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;desired/path/to/abaqus/file/aba.inp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This function call will result in creating a file &lt;strong&gt;aba.inp&lt;/strong&gt; containing the mesh and &lt;strong&gt;aba.tex&lt;/strong&gt; containing the orientations of each element.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;p&gt;Let’s generate a synthetic microstructure using statistics for a two-phase microstructure consisting of a primary phase and second-phase particles. For this purpose, we can use a prebuilt pipeline called &lt;em&gt;Two Phase Cubic Hexagonal Particles Equiaxed&lt;/em&gt; (comes with Dream.3D ver. 6.2.0) that uses statistics file &lt;code class=&quot;highlighter-rouge&quot;&gt;TwoPhaseCubicHexParticlesEquiaxed.dream3d&lt;/code&gt;. To this pipeline, we shall only add &lt;em&gt;Write Los Alamos FFT file&lt;/em&gt; filter to write the voxel file (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2ph_64x64x64.vox&lt;/code&gt;) from which we will create our mesh.&lt;/p&gt;

&lt;p&gt;After the pipeline is successfully completed, we run the MATLAB script pointing to our Los Alamos FFT grid file and giving a name for ABAQUS input file by the following command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;dream2abahex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;2ph_64x64x64.vox&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2ph_64x64x64.inp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Tip&lt;/strong&gt;: if &lt;code class=&quot;highlighter-rouge&quot;&gt;2ph_64x64x64.vox&lt;/code&gt; is not in MATLAB path, use the full path of the grid file, e.g. &lt;em&gt;`C:\Users\UserName\Documents\2ph_64x64x64.vox’&lt;/em&gt; as input to the function. Full path can also be used for the resulting mesh file. File with Euler angles will always be written to the same folder as the mesh file and will have the same name with extension .tex&lt;/p&gt;

&lt;p&gt;As a result, we obtain an ABAQUS input file (&lt;code class=&quot;highlighter-rouge&quot;&gt;2ph_64x64x64.inp&lt;/code&gt;) containing a C3D8 (brick) mesh with grains saved as Element Sets and phases saved as both Sets and Sections. In addition, we get a text file (&lt;code class=&quot;highlighter-rouge&quot;&gt;2ph_64x64x64.tex&lt;/code&gt;) with grain orientations (represented by Bunge Euler angles) for each element in the mesh with orientations sorted according to the element label. An example of the contents of the file with grain orientations is below&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Euler angle sets (phi1, Phi, phi2) for C3D8 mesh in 2ph_64x64x64.inp&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Euler angle sets are sorted according to element labels&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1 element in mesh - 1 set of Euler angles. Generated by dream2abahex.m&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;262144&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;17.0020&lt;/span&gt;     &lt;span class=&quot;mf&quot;&gt;115.9040&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;108.5220&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# -----&amp;gt; for element 1&lt;/span&gt;
      &lt;span class=&quot;mf&quot;&gt;17.0020&lt;/span&gt;     &lt;span class=&quot;mf&quot;&gt;115.9040&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;108.5220&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# -----&amp;gt; for element 2&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;105.7370&lt;/span&gt;      &lt;span class=&quot;mf&quot;&gt;51.4060&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;151.4460&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# -----&amp;gt; for element n&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;105.7370&lt;/span&gt;      &lt;span class=&quot;mf&quot;&gt;51.4060&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;151.4460&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# -----&amp;gt; for element ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;105.7370&lt;/span&gt;      &lt;span class=&quot;mf&quot;&gt;51.4060&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;151.4460&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# -----&amp;gt; for element 262144&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is seen that the orientation file has three information lines followed by a line containing Euler angles convention (B is for Bunge) and the total number of orientations in the file. Then, there are sets of three float numbers correponding to the three Euler angles – &lt;script type=&quot;math/tex&quot;&gt;\phi_{1}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\Phi&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\phi_{2}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s check if the Sections and Element Sets correctly represent the original phases and grains.&lt;/p&gt;

&lt;p&gt;Below is the comparison between the original phase IDs from dream3d file and the sections in the generated mesh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5822/21680572513_8eec239e12_o_d.png&quot; alt=&quot;Comparison of phases&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The distribution of phases looks identical in both figures. Next we compare the original grain IDs in dream3d file and Element Sets in the generated mesh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5833/21680572773_dd4f49e150_o_d.png&quot; alt=&quot;Comparison of grains&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks alright.&lt;/p&gt;

&lt;p&gt;As a final note, we should remember that the phases are passed to the ABAQUS model as Sections with assigned properties and they suppose that the model will contain the same number of Materials. Therefore, Materials named &lt;strong&gt;‘Phase-1’&lt;/strong&gt;, &lt;strong&gt;‘Phase-2’&lt;/strong&gt;, etc. must be defined for running the simulation.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/dream2abahex/&quot;&gt;ABAQUS hexahedral mesh and grain orientations from Dream.3D&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on October 19, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[FE deformation history for texture simulations]]></title>
 <link rel="alternate" type="text/html" href="/abaqus2vpsc/" />
  <id>/abaqus2vpsc</id>
  <updated>2015-08-03T00:00:00-00:00</updated>
  <published>2015-08-03T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;The post explains how to obtain local deformation history from ABAQUS finite element simulation of a deformation process for modeling of the corresponding texture evolution by VPSC.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Simulations of texture evolution during simple monotonic loading (e.g. uniaxial tension, compression) can be readily performed with the stand-alone VPSC code. However, it is frequently desired to analyze texture evolution during complex &lt;em&gt;non-monotonic&lt;/em&gt; deformation: for example, local texture evolution in a region of the sample during metal forming. In such cases, deformation histories can be obtained from finite element simulations. The present post describes a framework (inspired by &lt;a href=&quot;http://dx.doi.org/10.1016/j.actamat.2004.06.042&quot;&gt;&lt;em&gt;Li et al., 2004&lt;/em&gt;&lt;/a&gt;) for obtaining local deformation histories from ABAQUS simulations of a deformation process in a format readable by VPSC. The calculation of the velocity gradient tensor needed for VPSC simulations is implemented in a user material subroutine (UMAT), whereas post-processing of the results and writing it to an output text file is performed with the aid of ABAQUS Python scripting.&lt;/p&gt;

&lt;h1 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h1&gt;

&lt;p&gt;For an ABAQUS/Standard simulation of a metal forming process with a simple and widely used J2 plasticity model and isotropic hardening, local deformation history can be obtained in the following steps.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://github.com/latmarat/abaqus2vpsc/archive/master.zip&quot;&gt;my abaqus2vpsc.zip package&lt;/a&gt; containing the UMAT subroutine file (&lt;code class=&quot;highlighter-rouge&quot;&gt;j2isoVelOut.for&lt;/code&gt;) and the Python script (&lt;code class=&quot;highlighter-rouge&quot;&gt;abaqus2vpsc.py&lt;/code&gt;) for post-processing and extract it to a convenient location.&lt;/li&gt;
  &lt;li&gt;Create an ABAQUS/Standard model of the deformation process of interest as usual (create and mesh parts, define boundary conditions and interactions, etc.) with the following peculiarities:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Material.&lt;/strong&gt; Create a user material with 22 solution-dependent variables (SDVs) and list Young modulus, Poisson ratio, and stress–strain data in &lt;em&gt;Mechanical Constants&lt;/em&gt; table.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Field Output.&lt;/strong&gt; Request field output for SDVs in the deformable part of interest with a a reasonable frequency that will guarantee sufficiently small time increment in the VPSC simulation.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;UMAT file.&lt;/strong&gt; Upon job creation, point to the UMAT subroutine file &lt;a href=&quot;https://github.com/latmarat/abaqus2vpsc/blob/master/j2isoVelGradOut.for&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;j2isoVelOut.for&lt;/code&gt;&lt;/a&gt;, which includes calculation of the velocity gradient tensor.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the ABAQUS/Standard simulation and make sure it is successfully completed.&lt;/li&gt;
  &lt;li&gt;Get the label of the element for which local texture evolution (and thus the deformation history) is of interest.&lt;/li&gt;
  &lt;li&gt;Run the Python script &lt;a href=&quot;https://github.com/latmarat/abaqus2vpsc/blob/master/abaqus2vpsc.py&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abaqus2vpsc.py&lt;/code&gt;&lt;/a&gt; from ABAQUS/CAE or command line, which will extract the components of the velocity gradient for the element of interest and write them to a text file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below are some details on these steps assuming usage of ABAQUS/CAE.&lt;/p&gt;

&lt;h2 id=&quot;creating-user-material&quot;&gt;Creating user material&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Create a new material, giving it a meaningful name.&lt;/li&gt;
  &lt;li&gt;Go to &lt;em&gt;General&lt;/em&gt; -&amp;gt; &lt;em&gt;User Material&lt;/em&gt; and list consequently elastic modulus, Poisson ratio, and flow stress–plastic strain pairs.
 &lt;img src=&quot;https://farm1.staticflickr.com/318/20247850946_bd5bdd895a_o_d.png&quot; alt=&quot;Creating u4ser material&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Go to &lt;em&gt;General&lt;/em&gt; -&amp;gt; &lt;em&gt;Depvar&lt;/em&gt; and set &lt;em&gt;Number of solution-dependent variables&lt;/em&gt; to 22.
 &lt;img src=&quot;https://farm1.staticflickr.com/471/20274076485_6da5872b1c_o_d.png&quot; alt=&quot;Creating u4ser material&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;Tip&lt;/strong&gt;: entry of stress–strain pairs to Mechanical Constants table might be really tedious when the number of data points is large. If you already have a “normally” defined material in your model tree, you may use &lt;a href=&quot;https://github.com/latmarat/abaqus2vpsc/blob/master/elasplas2umat.py&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elasplas2umat.py&lt;/code&gt;&lt;/a&gt; utility script (coming with &lt;code class=&quot;highlighter-rouge&quot;&gt;abaqus2vpsc.zip&lt;/code&gt; package), which will transfer elastic and plastic properties from conventionally defined material to the Mechanical Constants of the user material.&lt;/p&gt;

&lt;h2 id=&quot;running-abaqus-simulation&quot;&gt;Running ABAQUS simulation&lt;/h2&gt;

&lt;p&gt;After finalizing the finite element model, create a job and specify the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;j2isoVelOut.for&lt;/code&gt; in &lt;em&gt;User subroutine file&lt;/em&gt; field in &lt;em&gt;General&lt;/em&gt; tab of &lt;em&gt;Edit job&lt;/em&gt; window. After pointing to the UMAT file, the job is ready for submission.&lt;/p&gt;

&lt;h2 id=&quot;identifying-the-element-of-interest&quot;&gt;Identifying the element of interest&lt;/h2&gt;

&lt;p&gt;The Python script, which reads the components of the velocity gradient tensor from the ABAQUS output database (odb file), requires the label of the element for which the deformation history is needed. The label of the element can be found in the Mesh module of ABAQUS/CAE:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;em&gt;Mesh&lt;/em&gt; module.&lt;/li&gt;
  &lt;li&gt;Go to &lt;em&gt;Tools&lt;/em&gt; -&amp;gt; &lt;em&gt;Query&lt;/em&gt; and choose &lt;em&gt;Element&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Pick the element for which local deformation history is needed&lt;/li&gt;
  &lt;li&gt;Read the label of the element of interest in the message area of ABAQUS window.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://farm1.staticflickr.com/330/20173661438_3ce701e827_o_d.png&quot; alt=&quot;get-elem-label&quot; /&gt;
Illustration of how to get the element label of interest in ABAQUS/CAE.&lt;/p&gt;

&lt;h2 id=&quot;post-processing&quot;&gt;Post-processing&lt;/h2&gt;

&lt;p&gt;After running the simulation as described above, the components of the velocity gradient tensor can be accessed in the output database (odb file) as state variables (SDV). While it is possible to manually export these variables to a text file for subsequent use in VPSC, a &lt;a href=&quot;https://github.com/latmarat/abaqus2vpsc/blob/master/abaqus2vpsc.py&quot;&gt;Python script&lt;/a&gt; was developed for extracting the evolution of the velocity gradient with ease and in the right format for VPSC.&lt;/p&gt;

&lt;p&gt;To run the script, open ABAQUS/CAE and&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;Run Script…&lt;/em&gt;, navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;abaqus2vpsc.py&lt;/code&gt; file contained in the downloaded &lt;code class=&quot;highlighter-rouge&quot;&gt;abaqus2vpsc.zip&lt;/code&gt; package.&lt;/li&gt;
  &lt;li&gt;In the appeared window for input, specify
    &lt;ul&gt;
      &lt;li&gt;the full path to the odb (e.g. &lt;em&gt;C:\Temp\rolling.odb&lt;/em&gt;)&lt;/li&gt;
      &lt;li&gt;Instance name of the deformable sample (e.g. &lt;em&gt;PART-1&lt;/em&gt;)&lt;/li&gt;
      &lt;li&gt;Element Number (or label) identified as described in the previous subsection&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Check run-time messages of the script in the message area of ABAQUS/CAE. Particularly, check if &lt;em&gt;Step&lt;/em&gt;, &lt;em&gt;Instance&lt;/em&gt;, and &lt;em&gt;Element number&lt;/em&gt; are correct. If the script completed successfully, the final message should be &lt;em&gt;‘Deformation history for VPSC is written to file&lt;/em&gt; same-path-as-odb\FE-Lij_hist.dat &lt;em&gt;’&lt;/em&gt; (see figure below).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;abaqus2vpsc.py&lt;/code&gt; script from ABAQUS/CAE with an example of filling the required fields.
&lt;img src=&quot;https://farm1.staticflickr.com/369/20368112281_be0f0dd678_o_d.png&quot; alt=&quot;abaqus2vpsc.py script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a result of running the script, the resulting file &lt;em&gt;FE-Lij_hist.dat&lt;/em&gt; will contain a heading, steps, and the components of the velocity gradient in the format required by VPSC. This file can be readily used for VPSC simulations of the local texture evolution corresponding to the obtained local deformation history.&lt;/p&gt;

&lt;h2 id=&quot;running-vpsc-simulation&quot;&gt;Running VPSC simulation&lt;/h2&gt;

&lt;p&gt;Refer to the &lt;a href=&quot;http://public.lanl.gov/lebenso/VPSC7c_manual.pdf&quot;&gt;VPSC manual&lt;/a&gt; on how to run a VPSC simulation of texture evolution for a given evolution of the velocity gradient tensor (especially Example 2, case B).&lt;/p&gt;

&lt;h1 id=&quot;appendix-calculation-of-l-tensor-in-umat&quot;&gt;Appendix: Calculation of &lt;strong&gt;L&lt;/strong&gt; tensor in UMAT&lt;/h1&gt;

&lt;p&gt;For texture simulations for non-uniform deformation, VPSC requires the evolution of velocity gradient tensor, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{L}&lt;/script&gt;. Since the velocity gradient tensor is not calculated in ABAQUS by default, its calculation has to be implemented in a user subroutine.&lt;/p&gt;

&lt;h2 id=&quot;why-umat&quot;&gt;Why UMAT?&lt;/h2&gt;

&lt;p&gt;In the current framework, the calculation of the velocity gradient is implemented in UMAT subroutine for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To UMAT, ABAQUS passes deformation gradient tensor, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{F}&lt;/script&gt;, from which the velocity gradient tensor can be readily calculated.&lt;/li&gt;
  &lt;li&gt;UMAT allows for storing custom quantities (velocity gradient components in our case) in an array of state variables (or solution-dependent variables, SDVs), which are then accessible in the output database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, the main purpose of UMAT is to implement a custom constitutive model of the material so that the current framework can be used with a wide range of user-defined material models.&lt;/p&gt;

&lt;h2 id=&quot;calculation-of-the-velocity-gradient-tensor&quot;&gt;Calculation of the velocity gradient tensor&lt;/h2&gt;

&lt;p&gt;The velocity gradient tensor, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{L}&lt;/script&gt;, can be derived from the deformation gradient, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{F}&lt;/script&gt;, passed to UMAT as follows (&lt;a href=&quot;http://dx.doi.org/10.1016/j.actamat.2004.06.042&quot;&gt;Li et al., 2004&lt;/a&gt;)&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{L} = \frac{\mathbf{F}_{\tau}\mathbf{F}^{-1}_{t}-\mathbf{I}}{\Delta t}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\mathbf{F}_{t}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;{\mathbf{F}}_{\tau}&lt;/script&gt; are the deformation gradient tensors at the beginning and end of the time increment, &lt;script type=&quot;math/tex&quot;&gt;\Delta t&lt;/script&gt; is the time increment, and &lt;script type=&quot;math/tex&quot;&gt;\mathbf{I}&lt;/script&gt; is the identity tensor.&lt;/p&gt;

&lt;p&gt;To implement the above equation in UMAT, we first calculate the inverse of the deformation gradient at the beginning of the time increment, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{F}_{t}&lt;/script&gt;, which is passed to UMAT as &lt;code class=&quot;highlighter-rouge&quot;&gt;DFGRD0&lt;/code&gt;. To keep the main UMAT subroutine neat, we shall define and use a custom subroutine &lt;code class=&quot;highlighter-rouge&quot;&gt;M3INV&lt;/code&gt; for calculation of the inverse of a 3x3 matrix:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;CALL M3INV(DFGRD0,FTINV)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which results in that the inverse of the deformation gradient &lt;script type=&quot;math/tex&quot;&gt;\mathbf{F}^{-1}_{t}&lt;/script&gt; is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;FTINV&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;We then calculate the product &lt;script type=&quot;math/tex&quot;&gt;{\mathbf{F}}_{\tau}{\mathbf{F}}^{-1}_{t}&lt;/script&gt;, again using a custom subroutine &lt;code class=&quot;highlighter-rouge&quot;&gt;MPROD&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;CALL MPROD(DFGRD1,FTINV,AUX)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the product &lt;script type=&quot;math/tex&quot;&gt;{\mathbf{F}}_{\tau}{\mathbf{F}}^{-1}_{t}&lt;/script&gt; being stored in an array &lt;code class=&quot;highlighter-rouge&quot;&gt;AUX&lt;/code&gt;, we can finally calculate the velocity gradient tensor, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{L}&lt;/script&gt;, with the following snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;DO 231 I=1,3
	DO 231 J=1,3
		VELGRD(I,J) = (AUX(I,J)-ONEMAT(I,J))/DTIME
231   CONTINUE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To make the velocity gradient tensor accessible in the output database, we store &lt;script type=&quot;math/tex&quot;&gt;L_{ij}&lt;/script&gt; components to the array of state variables, or SDV, as (starting from index 14 because elements of &lt;code class=&quot;highlighter-rouge&quot;&gt;STATEV&lt;/code&gt; with smaller indices are already in use for the constitutive model)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-fortran&quot; data-lang=&quot;fortran&quot;&gt;STATEV(14) = VELGRD(1,1)
STATEV(15) = VELGRD(1,2)
STATEV(16) = VELGRD(1,3)
STATEV(17) = VELGRD(2,1)
STATEV(18) = VELGRD(2,2)
STATEV(19) = VELGRD(2,3)
STATEV(20) = VELGRD(3,1)
STATEV(21) = VELGRD(3,2)
STATEV(22) = VELGRD(3,3)  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code snippets presented above result in that, with proper field output request, the components of the velocity gradient tensor are accessible in the output database of the ABAQUS simulation.  The calculation presented above can be incorporated into any UMAT subroutine for any material model as the computation requires only deformation gradient, which is always passed to UMAT by ABAQUS. Incorporation of the described computations in a UMAT subroutine requires care with the allocation of arrays (&lt;code class=&quot;highlighter-rouge&quot;&gt;VELGRD&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;FTINV&lt;/code&gt;, etc.). The &lt;a href=&quot;https://github.com/latmarat/abaqus2vpsc/blob/master/j2isoVelGradOut.for&quot;&gt;example UMAT&lt;/a&gt; described in this post can be used as a reference for the right allocation of arrays. The utility subroutines &lt;code class=&quot;highlighter-rouge&quot;&gt;M3INV&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MPROD&lt;/code&gt; are also given there.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/abaqus2vpsc/&quot;&gt;FE deformation history for texture simulations&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on August 03, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Getting started with VPSC and MTEX]]></title>
 <link rel="alternate" type="text/html" href="/vpsc-mtex/" />
  <id>/vpsc-mtex</id>
  <updated>2015-06-11T00:00:00-00:00</updated>
  <published>2015-06-11T00:00:00+02:00</published>
  
  <author>
    <name>Marat I. Latypov</name>
    <uri></uri>
    <email>marat.latypov@georgiatech-metz.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;This post is a short tutorial to help getting started with crystal plasticity simulations of texture evolution during plastic deformation. It explains how to run a simple VPSC simulation and visualize the simulated texture in MTEX.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;While VPSC comes with a &lt;a href=&quot;http://public.lanl.gov/lebenso/VPSC7c_manual.pdf&quot;&gt;manual&lt;/a&gt; that exhaustively treats the theory and usage of the software, all the details given there may look overwhelming for a beginner. This post is an attempt to aid running VPSC for the first time. It is assumed that the reader has a working VPSC7 executable and an access to MATLAB with &lt;a href=&quot;http://mtex-toolbox.github.io/&quot;&gt;MTEX&lt;/a&gt; (ver. 4.0.2x or later) installed.&lt;/p&gt;

&lt;h1 id=&quot;input&quot;&gt;Input&lt;/h1&gt;

&lt;p&gt;Running a VPSC simulation requires several input files. The &lt;a href=&quot;http://public.lanl.gov/lebenso/VPSC7c_manual.pdf&quot;&gt;VPSC manual&lt;/a&gt; gives a detailed line-by-line description of each of the input files so that only a very brief overview is given here for a minimal set of input files required for running a simple simulation. The simulation described in this tutorial follows Example 1 (Uniaxial tension of fcc steel) of the manual and all the necessary files should be available in VPSC package.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Master&lt;/strong&gt; input file, &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.in&lt;/code&gt;, is the main one. It contains the data on phases present in the aggregate, various simulation settings as well as pointers to the other input files. We are going to accept the settings given in Example 1 so that we only need to make sure that the paths to the other input files are correct. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.in&lt;/code&gt; must be in the same folder as &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.exe&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Texture&lt;/strong&gt; input file contains a set of Bunge Euler angles that represent the initial texture. VPSC offers &lt;code class=&quot;highlighter-rouge&quot;&gt;rand500.tex&lt;/code&gt; file with a set of 500 random orientations, which is sufficient for runing a simple simulation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Single crystal&lt;/strong&gt; input file contains crystal symmetry, elastic stiffness, slip and twinning systems, the hardening law and hardening parameters. We will use an input file for fcc austenitic steel deforming by slip only and with no strain hardening (provided as &lt;code class=&quot;highlighter-rouge&quot;&gt;fcc.sx&lt;/code&gt; in VPSC and shown on p. 55 of the manual).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Boundary conditions&lt;/strong&gt; input file specifies velocity gradient tensor and Cauchy stress tensor. The components of the velocity gradient and stress tensors are enforced through binary matrices &lt;code class=&quot;highlighter-rouge&quot;&gt;IUDOT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ISCAU&lt;/code&gt;, respectively (1 is on, 0 is off). In Example 1, uniaxial tension in &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; direction is defined through a velocity gradient tensor with &lt;script type=&quot;math/tex&quot;&gt;L_{11} = -0.5&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;L_{22} = -0.5&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;L_{33} = 1.0&lt;/script&gt; and zero off-diagonal components. Since we enforce the velocity gradient here, all components of &lt;code class=&quot;highlighter-rouge&quot;&gt;IUDOT&lt;/code&gt; are 1, whereas all components of &lt;code class=&quot;highlighter-rouge&quot;&gt;ISCAU&lt;/code&gt; are 0. Finally, uniaxial tension in this example is performed up to von Mises strain of 1.0 in 50 increments, which is specified in the first line of the BC input file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://farm1.staticflickr.com/319/19405629650_79f685b257_o_d.png&quot; alt=&quot;Master input file&quot; /&gt;
A screenshot of &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.in&lt;/code&gt; file provided for Example 1 (should be available as &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc7in.t&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;ex_01_FCC&lt;/code&gt; folder).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm1.staticflickr.com/264/18971038634_5cbcb514ef_o_d.png&quot; alt=&quot;Arrangment of input files&quot; /&gt;
Illustration of arrangement of the input files that corresponds to the &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.in&lt;/code&gt; shown above.&lt;/p&gt;

&lt;h1 id=&quot;running-the-simulation&quot;&gt;Running the simulation&lt;/h1&gt;

&lt;p&gt;On Windows, VPSC simulation can be launched by just a double click on &lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.exe&lt;/code&gt;. However, to be able to see runtime (or error) messages after simulation is completed (or failed), it is worth launching the simulation from Command Line.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; for a quick access to Command Line in the &lt;strong&gt;current&lt;/strong&gt; folder, hold Shift button and right-click anywhere in the folder. Press ‘Open command window here’ in the context menu and there will be no need in ‘cd’-ing all the way down to your current location.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;output&quot;&gt;Output&lt;/h1&gt;

&lt;p&gt;Upon successful completion of the simulation, there will be several output files. Again, the VPSC manual explains each of them in detail. In this tutorial, we will focus only on stress–strain curves and texture output.&lt;/p&gt;

&lt;h2 id=&quot;stress--strain-curves&quot;&gt;Stress–strain curves&lt;/h2&gt;

&lt;p&gt;Strain and stress tensors as well as von Mises stress and strain are written to &lt;code class=&quot;highlighter-rouge&quot;&gt;STR_STR.OUT&lt;/code&gt; file. The von Mises values are the first two columns in the file and can be easily plotted in any software.&lt;/p&gt;

&lt;h2 id=&quot;texture-visualization&quot;&gt;Texture visualization&lt;/h2&gt;

&lt;p&gt;Texture output from VPSC is written to &lt;code class=&quot;highlighter-rouge&quot;&gt;TEX_PH1.OUT&lt;/code&gt; file. There are different texture packages that can be used to visualize the simulated texture: from pole8 coming with VPSC to commercial software LaboTex.
This tutorial demonstrates texture visualization in free and open-source MATLAB toolbox &lt;a href=&quot;http://mtex-toolbox.github.io/&quot;&gt;MTEX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If MTEX is properly installed, the set of Euler angles obtained in VPSC can be loaded to MTEX by &lt;code class=&quot;highlighter-rouge&quot;&gt;loadEBSD_generic&lt;/code&gt; function. To do that, we first specify the crystal symmetry of our material and point to the path of the texture file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;texFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;your-folder/TEX_PH1.OUT&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crystalSymmetry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;cubic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then load the data by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;loadEBSD_generic&lt;/code&gt; as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadEBSD_generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;CS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ColumnNames&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Euler1&#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Euler2&#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Euler3&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Bunge&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now our orientations are stored in a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;. Since we loaded it using &lt;code class=&quot;highlighter-rouge&quot;&gt;loadEBSD&lt;/code&gt; function, MTEX treats the variable as EBSD data even though there is no spatial information for the orientations. At any rate, the orientations can be easily accessed as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can readily plot these discrete orientations in a pole figure with &lt;code class=&quot;highlighter-rouge&quot;&gt;plotPDF&lt;/code&gt; function. We only need to specify the Miller indices of the poles we would like to plot. In MTEX, Miller indices are defined by function &lt;code class=&quot;highlighter-rouge&quot;&gt;Miller&lt;/code&gt;, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Miller(h,k,l,CS)&lt;/code&gt;. Then, for a (111) pole figure, the command will be&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;nb&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotPDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Miller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; keyword ‘all’ in &lt;code class=&quot;highlighter-rouge&quot;&gt;plotPDF&lt;/code&gt; ensures that all orientations are plotted; otherwise MTEX will plot only a randomly picked subset of the orientations to save memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The inverse pole figure can be plotted using &lt;code class=&quot;highlighter-rouge&quot;&gt;plotIPDF&lt;/code&gt; function. For an inverse pole figure, we select a specimen direction to plot in respect to the crystal frame. Since tension in the simulation was performed in &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; direction, it is reasonable to visualize distribution of the &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; specimen direction, which can be accessed as &lt;code class=&quot;highlighter-rouge&quot;&gt;zvector&lt;/code&gt; in MTEX. Then the command is&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;nb&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotIPDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zvector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; inverse pole figure might be oriented in an unexpected way: (111) pointing west instead of north. To “fix” this, run command &lt;code class=&quot;highlighter-rouge&quot;&gt;plotx2east&lt;/code&gt; prior to plotting or, in existing Figure window, go to MTEX -&amp;gt; X axis direction -&amp;gt; East.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3831/19586693292_1d52d6bcf4_o_d.png&quot; alt=&quot;Discrete orientations&quot; /&gt;
The result of plotting discrete orientations in a pole figure and inverse pole figure.&lt;/p&gt;

&lt;p&gt;Next, to make continuous plots, we need to estimate orientation distribution function (ODF). In MTEX, ODFs can be calculated from a set of discrete orientations by &lt;code class=&quot;highlighter-rouge&quot;&gt;calcODF&lt;/code&gt; function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calcODF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that the ODF for our orientation set is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;odf&lt;/code&gt; variable, we can plot pole figures and inverse pole figures using &lt;code class=&quot;highlighter-rouge&quot;&gt;plotPDF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;plotIPDF&lt;/code&gt; functions in the same fashion as for discrete orientations, i.e.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;nb&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotPDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Miller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotIPDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zvector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3678/19405629990_3c57394a4b_o_d.png&quot; alt=&quot;Orientation distribution function&quot; /&gt;
The result of plotting ODF in a pole figure and inverse pole figure.&lt;/p&gt;

&lt;p&gt;Since Example 1 of the VPSC manual features predictions of texture and stresses with different interaction schemes: Full Constraint (aka Taylor), Affine, Secant, Tangent, and others, the reader is encouraged to run the simulations with these different settings and compare the predictions with those in the manual. The interaction schemes can be set in the main input file (&lt;code class=&quot;highlighter-rouge&quot;&gt;vpsc.in&lt;/code&gt;) by choosing the desired value for &lt;code class=&quot;highlighter-rouge&quot;&gt;interaction&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3 id=&quot;custom-function-for-vpsc-texture&quot;&gt;Custom function for VPSC texture&lt;/h3&gt;

&lt;p&gt;Once we set our mind on how we would like to visualize simulated textures and if we are to use the procedure repeatedly for many output data sets, it is handy to write a custom function that will do the whole thing with the file name as the only input from the user.&lt;/p&gt;

&lt;p&gt;For our case such a function will be something like this (let’s call it plotVpscTex):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-matlab&quot; data-lang=&quot;matlab&quot;&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotVpscTex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;% crystal symmetry&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crystalSymmetry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;cubic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;% pole figures to plot&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Miller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Miller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Miller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;% inverse pole figures to plot&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xvector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yvector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zvector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadEBSD_generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;CS&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;ColumnNames&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Euler1&#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Euler2&#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Euler3&#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;weight&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Bunge&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotPDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;all&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plotIPDF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that, in this function, &lt;code class=&quot;highlighter-rouge&quot;&gt;plotPDF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;plotIPDF&lt;/code&gt; are used for &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; variables which contain several Miller indices and specimen directions. It allows plotting several pole figures and inverse pole figures at once and thus choosing the best one for visualization in each particular case. This function can be easily customized further for continuous or contour plots, etc.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/vpsc-mtex/&quot;&gt;Getting started with VPSC and MTEX&lt;/a&gt; was originally published by Marat I. Latypov at &lt;a href=&quot;&quot;&gt;research blog&lt;/a&gt; on June 11, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
